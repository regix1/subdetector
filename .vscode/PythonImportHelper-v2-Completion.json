[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "detect",
        "importPath": "langdetect",
        "description": "langdetect",
        "isExtraImport": true,
        "detail": "langdetect",
        "documentation": {}
    },
    {
        "label": "pytesseract",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytesseract",
        "description": "pytesseract",
        "detail": "pytesseract",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "extract_subtitle_track",
        "kind": 2,
        "importPath": "src.subdetector.detector",
        "description": "src.subdetector.detector",
        "peekOfCode": "def extract_subtitle_track(media_file, stream_index, output_dir):\n    \"\"\"Extract a subtitle track from media file\"\"\"\n    format_ext = {\n        'ass': 'ass',\n        'subrip': 'srt',\n        'hdmv_pgs_subtitle': 'sup',\n        'dvd_subtitle': 'sub'\n    }\n    stream_info = get_stream_info(media_file, stream_index)\n    codec_name = stream_info.get('codec_name', '')",
        "detail": "src.subdetector.detector",
        "documentation": {}
    },
    {
        "label": "get_stream_info",
        "kind": 2,
        "importPath": "src.subdetector.detector",
        "description": "src.subdetector.detector",
        "peekOfCode": "def get_stream_info(media_file, stream_index):\n    \"\"\"Get detailed info about a specific stream\"\"\"\n    cmd = [\"ffprobe\", \"-v\", \"quiet\", \"-print_format\", \"json\", \n           \"-show_streams\", \"-select_streams\", str(stream_index), media_file]\n    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    data = json.loads(result.stdout)\n    if 'streams' in data and len(data['streams']) > 0:\n        return data['streams'][0]\n    return {}\ndef get_subtitle_streams(media_file):",
        "detail": "src.subdetector.detector",
        "documentation": {}
    },
    {
        "label": "get_subtitle_streams",
        "kind": 2,
        "importPath": "src.subdetector.detector",
        "description": "src.subdetector.detector",
        "peekOfCode": "def get_subtitle_streams(media_file):\n    \"\"\"Get all subtitle streams from media file\"\"\"\n    cmd = [\"ffprobe\", \"-v\", \"quiet\", \"-print_format\", \"json\", \n           \"-show_streams\", \"-select_streams\", \"s\", media_file]\n    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    data = json.loads(result.stdout)\n    return data.get('streams', [])\ndef detect_text_subtitle_language(subtitle_file):\n    \"\"\"Detect language for text-based subtitles\"\"\"\n    try:",
        "detail": "src.subdetector.detector",
        "documentation": {}
    },
    {
        "label": "detect_text_subtitle_language",
        "kind": 2,
        "importPath": "src.subdetector.detector",
        "description": "src.subdetector.detector",
        "peekOfCode": "def detect_text_subtitle_language(subtitle_file):\n    \"\"\"Detect language for text-based subtitles\"\"\"\n    try:\n        with open(subtitle_file, 'r', encoding='utf-8', errors='replace') as f:\n            content = f.read()\n    except:\n        try:\n            # Try another common encoding\n            with open(subtitle_file, 'r', encoding='latin-1', errors='replace') as f:\n                content = f.read()",
        "detail": "src.subdetector.detector",
        "documentation": {}
    },
    {
        "label": "extract_images_from_pgs",
        "kind": 2,
        "importPath": "src.subdetector.detector",
        "description": "src.subdetector.detector",
        "peekOfCode": "def extract_images_from_pgs(sup_file, output_dir, max_frames=10):\n    \"\"\"Extract image frames from PGS/SUP file\"\"\"\n    output_pattern = os.path.join(output_dir, 'frame_%04d.png')\n    cmd = [\n        \"ffmpeg\", \"-i\", sup_file,\n        \"-vf\", \"select='eq(pict_type,I)'\",\n        \"-vsync\", \"0\",\n        \"-frames:v\", str(max_frames),\n        output_pattern\n    ]",
        "detail": "src.subdetector.detector",
        "documentation": {}
    },
    {
        "label": "detect_image_subtitle_language",
        "kind": 2,
        "importPath": "src.subdetector.detector",
        "description": "src.subdetector.detector",
        "peekOfCode": "def detect_image_subtitle_language(subtitle_file, temp_dir):\n    \"\"\"Detect language for image-based subtitles (VOB, PGS)\"\"\"\n    frames_dir = os.path.join(temp_dir, \"frames\")\n    os.makedirs(frames_dir, exist_ok=True)\n    # Extract frames\n    frames = extract_images_from_pgs(subtitle_file, frames_dir)\n    if not frames:\n        return None\n    # OCR each frame and collect text\n    all_text = []",
        "detail": "src.subdetector.detector",
        "documentation": {}
    },
    {
        "label": "is_media_file",
        "kind": 2,
        "importPath": "src.subdetector.detector",
        "description": "src.subdetector.detector",
        "peekOfCode": "def is_media_file(file_path):\n    \"\"\"Check if file is a media container or standalone subtitle\"\"\"\n    # Common media container extensions\n    media_extensions = ['.mkv', '.mp4', '.avi', '.mov', '.m4v', '.ts', '.mpg', '.mpeg', '.vob', '.iso']\n    # Standalone subtitle extensions\n    subtitle_extensions = ['.srt', '.ass', '.ssa', '.sub', '.sup', '.idx', '.pgs']\n    ext = os.path.splitext(file_path)[1].lower()\n    # First, try to probe with ffprobe to see if it's a media file\n    cmd = [\"ffprobe\", \"-v\", \"error\", file_path]\n    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)",
        "detail": "src.subdetector.detector",
        "documentation": {}
    },
    {
        "label": "detect_subtitle_format",
        "kind": 2,
        "importPath": "src.subdetector.detector",
        "description": "src.subdetector.detector",
        "peekOfCode": "def detect_subtitle_format(subtitle_file):\n    \"\"\"Detect the format of a subtitle file\"\"\"\n    ext = os.path.splitext(subtitle_file)[1].lower()\n    # Try to determine by extension\n    if ext in ['.srt', '.vtt']:\n        return 'text'\n    elif ext in ['.ass', '.ssa']:\n        return 'text'\n    elif ext in ['.sup', '.pgs']:\n        return 'image'",
        "detail": "src.subdetector.detector",
        "documentation": {}
    },
    {
        "label": "detect_subtitle_languages",
        "kind": 2,
        "importPath": "src.subdetector.detector",
        "description": "src.subdetector.detector",
        "peekOfCode": "def detect_subtitle_languages(media_file, track_index=None):\n    \"\"\"Detect languages for subtitle tracks in media file or standalone subtitle\"\"\"\n    with tempfile.TemporaryDirectory() as temp_dir:\n        # Check if it's a media file or a subtitle file\n        if is_media_file(media_file):\n            subtitle_streams = get_subtitle_streams(media_file)\n            # Filter for specific track if requested\n            if track_index is not None:\n                subtitle_streams = [s for s in subtitle_streams if s['index'] == track_index]\n            if not subtitle_streams:",
        "detail": "src.subdetector.detector",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.subdetector.detector",
        "description": "src.subdetector.detector",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(description='Detect subtitle languages in media files or subtitle files')\n    parser.add_argument('file', help='Media file or subtitle file path')\n    parser.add_argument('-t', '--track', type=int, help='Specific subtitle track index to analyze (for media files only)')\n    args = parser.parse_args()\n    file_path = args.file\n    if not os.path.exists(file_path):\n        print(f\"Error: File '{file_path}' does not exist\")\n        sys.exit(1)\n    print(f\"Detecting subtitle language in: {file_path}\")",
        "detail": "src.subdetector.detector",
        "documentation": {}
    }
]